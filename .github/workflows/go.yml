name: Go
on:
  # push:
  #   branches:
  #     - master
  pull_request:
    branches:
      - master
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: gen new json
      run: |
        # git diff ${{ github.event.before }} ${{ github.sha }} cmd/normal/test.json | grep -v '^+++' |grep '^+' |sed -e 's/^+//'  > test.json
        git diff HEAD^1 HEAD cmd/normal/test.json | grep -v '^+++' |grep '^+' |sed -e 's/^+//'  > test.json

        output=`curl -vv -X POST  -H 'Content-Type: application/json' -d @test.json http://47.52.153.57:62000/jsontest 2>&1 | grep 'HTTP/1.1 200 OK'`

        if [ -z "$output" ]
        then
            echo "\$output is empty"
            exit -1
        else
            echo "\$output is NOT empty, http status ok"
        fi

    # - name: wget
    #   uses: wei/wget@v1
    #   with:
    #     args: -O sample.html https://httpbin.org/html

    # - id: file_changes
    #   uses: trilom/file-changes-action@v1
    #   with:
    #     githubToken: ${{ secrets.GITHUB_TOKEN }}
    # - name: show file change
    #   run: |
    #     ls $HOME
    #     cat $HOME/files.json
    #     cat $HOME/files_modified.json
    #     cat $HOME/files_added.json
    #     cat $HOME/files_deleted.json
    #     echo '${{ steps.file_changes.outputs.files_modified}}'
    #     echo '${{ steps.file_changes.outputs.files_added}}'
    #     echo '${{ steps.file_changes.outputs.files_deleted}}'

    # - name: get changed files
    #   id: getfile
    #   run: |
    #     echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs)"

    # - name: echo output
    #   run: |
    #     echo ${{ steps.getfile.outputs.files }}

    # - name: get changed json diff
    #   id: jsondiff
    #   run: |
    #     echo "::set-output name=content::$(git diff ${{ github.event.before }} ${{ github.sha }} cmd/normal/test.json | xargs)"

    # - name: echo json diff output
    #   run: |
    #     echo ${{ steps.jsondiff.outputs.content }}

    - name: Build
      run: go build -v ./cmd/normal

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Changes in this Release
    #       - created by action
    #     draft: false
    #     prerelease: false

    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ./normal
    #     asset_name: normal
    #     asset_content_type: application/octet-stream
